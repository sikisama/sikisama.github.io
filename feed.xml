<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>sikisama的博客</title>
        <description>sikisama的博客</description>
        <link>http://sikisama.github.io</link>
        <atom:link href="http://sikisama.github.io/feed.xml" rel="self" type="application/rss+xml" />
        <pubDate>2016-08-05 11:08:26</pubDate>
        <lastBuildDate>2016-08-05 11:08:26</lastBuildDate>
        <generator>Gitblog v1.0</generator>
                <item>
            <title>mdx重要概念</title>
            <description>
            &lt;!--
author: zhangxuefeng
date: 2016-07-07
title: mdx重要概念
tags: mdx
category: study
status: publish
summary: mdx重要概念
--&gt;
&lt;blockquote&gt;
&lt;p&gt;Mdx为多维数据库提供了表达式语查询语法，用于cube数据，并提供了许多强大的分析函数，用于支持常用的OLAP分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;语法&quot;&gt;语法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;维度、级别、成员等，一般用唯一名称UniqueName来标示，可以用[]包围name,如果name有空格或者数字开头，必须使用[],否则可以忽略。UniqueName是根据层次结构表示的一种方法。即递归显示出祖先的名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;维度（Dimension):维度直接用[]包围。比如Product的唯一名称为[Product]或Product。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[属性]是维度的基本构造块。 维度包含一组在属性关系基础上组织而成的属性。具有对外关系的任何属性必须具有与其相关属性关联的唯一键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;级别（Level）:级别的UniqueName为[维度名称].[级别名称]，如[year].[2001]，同样，如果没有空格，[]可以省略，如year.[2001]。&lt;/li&gt;
&lt;li&gt;成员（Member）:成员的UniqueName格式为[维度].(Parent  Member  UniqueName).[Member Name],如：时间维上的2003年2月份的UniqueName为[2003].[1].[2]，中间的1为1季度，因为该维度的结构为年、季、月。&lt;/li&gt;
&lt;li&gt;度量（Measure）:度量实际上是属于维度维的成员，也就是说度量（Measure）是任何Cube的一个维度。如：度量Unit Sales的UnqiueName为[Measures].[Unit Sales]&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;元组、集合&quot;&gt;元组、集合&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;元组用于定义来自多维数据切片；他是由一个或多个维度的单个成员的有序集合组成。元组内不包含来自同一个维度的多个成员（可以理解为坐标），元组用（）包围。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;（时间.[下半年]）&lt;/p&gt;
&lt;p&gt;（时间.[下半年],[产品].[手机].[Nokia]）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;集合（Set）是零个、一个或多个元组的有序集合。集合最常用于在Mdx查询中定义轴维度和切片器维度，并且同样可能只具有单个元组或可能在某些情况下为空。在Mdx语法中，元组用花括号{}来构造集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例，下面是具有两个元组的集合：&lt;/p&gt;
&lt;p&gt;{（时间.[上半年],路线.非陆地.航空），（时间.[下半年]，路线.非陆地.海路）}&lt;/p&gt;
&lt;p&gt;一个集合可包含同一个元组不止一次的出现。这样也是可以的：&lt;/p&gt;
&lt;p&gt;{时间.[下半年],时间.[下半年]}&lt;/p&gt;
&lt;p&gt;集合值以元组表示的一组成员组合，或指集合中的元组所代表的单元中的值，视集合使用的上下文而定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：单个元组的集合不等于元组。如{时间.[下半年]}不等于  时间.[下半年]。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;Mdx基本语法结构&quot;&gt;Mdx基本语法结构&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;    SELECT  [axis specification] ON COLUMNS,

                [axis specification] ON ROWS

   FROM

                [cube name]

   WHERE

              [silcer specification]&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[axis specification]可以看成是轴的成员选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;[silcer specification]表示切片上的成员，可以看成过滤信息，[silcer specification]可选，如果没有指定，取系统默认的维度成员作为切片&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;轴维度和切片器维度&quot;&gt;轴维度和切片器维度&lt;/h2&gt;
&lt;p&gt;当设计多维表达式（Mdx）查询时，应用程序一般查看多维数据集并将维度集合划分为两个子集：&lt;/p&gt;
&lt;p&gt;1.查询轴 - 从此层次结构集中检索多个成员的数据。&lt;/p&gt;
&lt;p&gt;2.切片器轴 - 从此层次结构集中检索单个成员的数据。&lt;/p&gt;            </description>
            <pubDate>2016-07-05 14:51:27</pubDate>
            <link>http://sikisama.github.io/blog/mdx.html</link>
            <guid isPermaLink="true">http://sikisama.github.io/blog/mdx.html</guid>
                                               <category>study</category>
                                    </item>
                <item>
            <title>正则表达式与preg函数</title>
            <description>
            &lt;!--
author: zhangxuefeng
date: 2016-06-27
title: 正则表达式与preg函数
tags: 正则表达式
category: study
status: publish
summary: 正则规范
--&gt;
&lt;p&gt;&lt;a href=&quot;http://www.noupe.com/development/php-regular-expressions.html&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;operator&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;The circumflex symbol marks the beginning of a pattern, although in some cases it can be omitted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;Same as with the circumflex symbol, the dollar sign marks the end of a search pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;The period matches any single character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;It will match the preceding pattern zero or one times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;It will match the preceding pattern one or more times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;It will match the preceding pattern zero or more times&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;Boolean OR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;Matches a range of elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;Groups a different pattern elements together&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;td&gt;Matches any single character between the square brackets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{min, max}&lt;/td&gt;
&lt;td&gt;It is used to match exact character counts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;Matches any single digit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;Matches any single non digit caharcter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;Matches any alpha numeric character including underscore (_)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;Matches any non alpha numeric character excluding the underscore character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;Matches whitespace character&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EXAMPLE&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;‘/hello/’&lt;/td&gt;
&lt;td&gt;It will match the word hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/^hello/’&lt;/td&gt;
&lt;td&gt;It will match hello at the start of a string. Possible matches are hello or helloworld, but not worldhello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/hello$/’&lt;/td&gt;
&lt;td&gt;It will match hello at the end of a string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/he.o/’&lt;/td&gt;
&lt;td&gt;It will match any character between he and o. Possible matches are helo or heyo, but not hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/he?llo/’&lt;/td&gt;
&lt;td&gt;It will match either llo or hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/hello+/’&lt;/td&gt;
&lt;td&gt;It will match hello on or more time. E.g. hello or hellohello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/he*llo/’&lt;/td&gt;
&lt;td&gt;Matches llo, hello or hehello, but not hellooo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/hello&lt;/td&gt;
&lt;td&gt;world/’&lt;/td&gt;
&lt;td&gt;It will either match the word hello or world&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/(A-Z)/’&lt;/td&gt;
&lt;td&gt;Using it with the hyphen character, this pattern will match every uppercase character from A to Z. E.g. A, B, C…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/[abc]/’&lt;/td&gt;
&lt;td&gt;It will match any single character a, b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/abc{1}/’&lt;/td&gt;
&lt;td&gt;Matches precisely one c character after the characters ab. E.g. matches abc, but not abcc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/abc{1,}/’&lt;/td&gt;
&lt;td&gt;Matches one or more c character after the characters ab. E.g. matches abc or abcc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘/abc{2,4}/’&lt;/td&gt;
&lt;td&gt;Matches between two and four c character after the characters ab. E.g. matches abcc, abccc or abcccc, but not abc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;常用函数&quot;&gt;常用函数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://php.net/manual/zh/function.preg-match.php&quot;&gt;preg_match&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://php.net/manual/zh/function.preg-replace.php&quot;&gt;preg_repalce&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;game&quot;&gt;game&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://regex.alf.nu/&quot;&gt;title&lt;/a&gt;
&lt;a href=&quot;http://felixc.at/regex.alf.nu&quot;&gt;answer&lt;/a&gt;&lt;/p&gt;            </description>
            <pubDate>2016-08-05 11:00:48</pubDate>
            <link>http://sikisama.github.io/blog/reg_express.html</link>
            <guid isPermaLink="true">http://sikisama.github.io/blog/reg_express.html</guid>
                                               <category>study</category>
                                    </item>
                <item>
            <title>Git使用指南</title>
            <description>
            &lt;!--
author: zhangxuefeng
date: 2016-06-07
title: Git使用指南
tags: Git
category:study
status: publish
summary: 总结一些git常用的命令
--&gt;
&lt;h2 id=&quot;一.创建与添加&quot;&gt;一.创建与添加&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.git init //将一个目录初始化为git仓库&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建立一个空的仓库，目录下会多一个.git的隐藏文件夹，用来跟踪管理版本库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.git add //添加文件到缓存&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将文件添加至缓存，多个文件用空格分隔&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git add .&lt;/strong&gt; 或 &lt;strong&gt;git add  *&lt;/strong&gt; 可以递归的添加当前目录的所有文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3.git commit -m 'comments' //记录缓存内容的快照&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将（已缓存的/已add的）文件提交到仓库，生成快照&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4.git commit -a &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自动将在提交前已记录、修改的文件放入缓存区(跳过add)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5.git clone [url] [new_name] //复制一个Git仓库
eg. git clone https://github.com/sikisama/sikisama.github.io
or
git clone git://github.com/sikisama/sikisama.github.io&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;二、查看与修改&quot;&gt;二、查看与修改&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.git status / git status -s //查看工作目录与缓存状态&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看代码在缓存与当前工作目录的状态。带-s参数显示简短的结果，第一栏是缓存（add之后），第二栏是工作目录（add之前）。&lt;/p&gt;
&lt;p&gt;用于查看上一次提交之后(commit)有什么被修改或临时提交的（add）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.git diff  //尚未缓存的改动&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示上次提交快照（commit）之后尚未缓存(add)的所有修改。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行完git status 再跑一下 git diff 是好习惯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;3.git diff --cached   //已缓存的改动&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示接下来将要写入快照的内容（after add before commit ）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4.git diff HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看已缓存与未缓存的改动，也就是工作目录与上一次提交(commit)的更新区别，无视缓存。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5.git diff --stat //显示摘要&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示摘要而非整个diff&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6.git reset HEAD -- file //已缓存与未缓存的改动&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;取消&lt;/strong&gt;已经缓存（add）的内容，将缓存区恢复到做出修改之前的样子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//回退到之前的若干个版本(commit)
git reset --hard HEAD^/HEAD~[n]
git reset --hard [commit_id]

7.git rm &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将文件从缓存区&lt;strong&gt;移除&lt;/strong&gt;，如果要在目录中保留，使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm --cached

8.git mv  //git rm --cached orig;mv orig new;git add new&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;三、远程仓库&quot;&gt;三、远程仓库&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 git fetch 更新你的项目，使用 git push 分享你的改动。 你可以用 git remote 管理你的远程仓库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.git remote /git remote -v //罗列添加和删除远端仓库的别名&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当你需要与远端仓库同步的时候，不需要使用它详细的链接。Git 储存了你感兴趣的远端仓库的链接的别名或者昵称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.git remote add [alias] [url]//为项目添加一个远程仓库

3.git remote rm [alias] //删除现存的某个别名

4.git fetch //从远端下载新分支与数据&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要同步远端信息，首先 git fetch [alias] 告诉git去获取数据，然后执行 git merge [alias]/[branch]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5.git pull //从远端仓库提取数据并尝试合并到当前分支,在git fetch 后 git merge 

6.git push [alias] [branch]//推送你的新分支到某个远端仓库&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会将你的[branch]分支推送成[alias]远端上的[branch]分支。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git push [alias] [branch] 将你的本地改动推送到远端仓库。 如果可以的话，它会依据你的 [branch] 的样子，推送到远端的 [branch] 去。 如果在你上次提取、合并之后，另有人推送了，Git 服务器会拒绝你的推送，知道你是最新的为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;修正这个问题:执行 git fetch github; git merge github/master，然后再推送。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、分支与合并&quot;&gt;四、分支与合并&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;执行 git branch [branchname] 来创建分支，用 git checkout [branchname] 命令切换到该分支。当切换分支的时候，git会用该分支最后提交的快照来替换工作目录的内容。使用 git merge 来合并分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.git branch //列出、创建与管理工作上下文

2.git checkout [branchname] //切换到新的分支上下文

3.git branch [branchname] //切换到新的分支上下文&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git将还原你的工作目录到你创建分支时的样子——可以把它看做一个记录你当前进度的书签。    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4.git checkout -b [branchname] //创建新分支并立即切换到它

5.git branch -d [branchname] //删除分支

6.git merge [branchname] //将分支合并到当前分支&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;合并冲突&lt;/strong&gt;
不同分支修改了相同区块的代码，就会出现冲突。使用git diff 可以显示冲突的双方和冲突解决的方法。使用git add告诉git文件中的冲突已经解决。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7.git log //显示一个分支中提交的更改记录

8.git log --online //查看紧凑简介的版本，--graph 选项查看历史中出现的分支和合并

9.git log --online master ^dev //在不想看到的分支前放一个 ^

10.git tag //给历史记录中某个重要的一点打上标签

git tag -a [v] [sha]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codeigniter.org.cn/&quot;&gt;git参考手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot;&gt;git教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;            </description>
            <pubDate>2016-08-05 11:12:07</pubDate>
            <link>http://sikisama.github.io/blog/git_instruction_manual.html</link>
            <guid isPermaLink="true">http://sikisama.github.io/blog/git_instruction_manual.html</guid>
                                               <category>study</category>
                                    </item>
            </channel>
</rss>